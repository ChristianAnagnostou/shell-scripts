#! /bin/bash

# Christian Anagnostou

# 1)
# a. whereis date outputs the pathmame of the date command as well as its man page
# b. echo $PATH shows us that the script for the date command is within our PATH and is therefore executable without having to type the relative pathname of date
# c. Making a new file named date with a command within it doesn't make that file executable. You have to manually make the file executable.
# d. After making a new file named date, this will not run as an executable file unless you specify the file as executable. Making it executable will then allow you to run the file but only if you enter the relative pathname. The only way to make it so that you don't have to enter the relative pathname would be to have the pathname within your $PATH 


# 2) If you do not have execute access to a script but you do have read access, you can use cp to copy the contents of the script into a new file and then you can make that file executable for yourself to run. 
#    Another way would be to use $ bash PROGRAM; then $. PROGRAM;


# 3) The PATH variable contains the pathnames of executable files that serve as commands for anyone with execute permission. The shell searches through the directories found in the PATH variable and uses executable files within those directories as commands.
# a. export PATH=/usr/local/bin"/usr/bin:/bin:/usr/kerberos/bin:~/bin:.:
# b. The /usr/bin/doit file will be executed first becuase /usr/bin is before ~/bin in the PATH variable
# c. If your PATH variable is not set to search the working directory, you can use ./filename to run the script if you have execute permissions.
# d. The command to add a directory to the PATH variable is: set PATH=%PATH%;C:/new/path

# 4) $ person=jenny
# a. $ echo $person; => jenny
# b. $ echo '$person'; => $person
# c. $ echo "$person"; => jenny

# 5) 
# a. To make it executable: chmod +x journal
# b. The read command takes in one line of user input whereas cat can take multiple lines of user input.

# 6) 
# a. /home/jenny/grants/biblios
# b. /home/jenny/biblios

# 7) ps OR echo $$

# 8) There is no output from sleep. The cat command gets its input from the file /etc/inittab. The file contents will print and not show the prompt until the sleep program finishing running for 30 seconds.

# 9) In the below script, the ls command shows that variable expansion happens before pathname expansion. The $NEW variable needs to be evaluated before the /* is evaluated.

new="new"
ls ./$new/*

# 10) Get current shell
ps -p $$ | tail -n 1 | tr -s ' ' | cut -d' ' -f5

